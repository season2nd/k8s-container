Deployment
replicaSet을 제어하는 parent역할을 합니다 

deployment의 궁긍적인 목표는 배포와 rollout, rollup을 하기 위해서 만들어 졌습니다 

1. 개수를 보장해 줍니다 
2. 기존의 내가 서비스하는 버전을 다 recording뜰수 있습니다 
3. recording 이후에는 내가 원하는 버전으로 win back할수 있습니다.


작동원리
1. deployment가 rs를 하나 만듭니다 
2. rs에서는 실행시킬 pod를 만듭니다(예)nginx1.14 버전등. 
rs는 controller처럼 pod의 개수를 보장해 줍니다.

kubectl create deployment deploy --image=nginx:1.14 --dry-run=client -o yaml >deploy.yaml


# kubectl create -f deploy.yaml --record=true

# kubectl get deployments.apps deploy 
NAME     READY   UP-TO-DATE   AVAILABLE   AGE
deploy   3/3     3            3           3m

# kubectl set image deployment deploy deploy nginx=nginx:1.15 --record=true

# kubectl rollout history deployment deploy 

# kubectl set image deployment deploy deploy nginx=nginx:1.16 --record=true

모니터링 명령어 입니다 
실시간 확인 watch를 붙입니다

#watch kubectl rollout status deployment deploy
#watch kubectl rollout resume deployment deploy
#watch kubectl rollout pause deployment deploy

rollout은 서비스 대상은 아래의 3가지 입니다 
  *  deployments
  *  daemonsets
  *  statefulsets
# kubectl rollout undo deployment deploy   : 현재 버전에서 그 전버전으로 가겠다라는 의미 입니다 

# kubectl rollout undo deployment deploy --to-revision=1  
history로 확인한 revision에서 내가 원하는 revision 숫자를 넣어서 원하는 버전으로 다시 rollout할수 있습니다 
 
 deployment 
[root@master ~]# kubectl delete deployments.apps deploy 
deployment.apps "deploy" deleted

annotation 

리소스에 대한 정보 전달을 목적으로 사용 
구성은 label과 동일합니다 key: value 구조로 가져갑니다 

annotations:
  imageregistry: "http://registry.example.com
  build: "hong"
  builddate: "20211216"
  
 
 statfulset
 기본적으로 pod의 이름을 보장해 줍니다 
 단 마지막 문장에 숫자가 들어갑니다 ( 숫자 카운트 0번째 요소부터 시작합니다)
 
 
1. sf.yaml 업로드한 yaml을 확인해주세요 
2. kubectl create -f sf.yaml   
nginx1.14

3. kubectl edit statefulsets sf-nginx 
에서 image 버전을 nginx1.15로 변경 

4. # kubectl rollout undo statefulset sf-nginx  
기존의 1.14버전으로 rollout 합니다 

daemonset : 워크 노드당 하나의 pod를 보장합니다 
--------------------------------------------------------------------------------------------
job: 모든 application 이 계속해서 running 할 필요가 없습니다 

본연의 일을 마무리 하면 release해되 되는 application도 존재 합니다
하지만 마무리 못하면 restart합니다 


# kubectl run testpod --image=centos:7 --command sleep 5
# kubectl run testpod --image=centos:7 --command sleep 5 --dry-run=client -o yaml > testpod.yaml


 

restartPolicy : Never  ==>pod restart pod를 다시 실행
onFailure : 컨테이너가 비 정상 종료시 다시 start 시킴
(주의 사항 : onFailure는 pod가 아니라 container를 지칭합니다)

Parallelism:    -->동시에 running되어야 하는 pod의 개수
Completions:  
 
 ------------------------------------------------------
 cluster IP 실습
 
 1. deployment를 하나 띄워주세요  (nginx)
replicas 3 이라고 했을때 
3대의 nginx pod에 들어가셔서 index.html파일을 변경해주세요 

Test nginx1
Test nginx2
Test nginx3 

2. 제가 clusterip.yaml 파일을 실행 합니다 

3. kubectl get svc
4. curl 10.100.100.100

[root@master ~]# kubectl get pods
NAME                      READY   STATUS    RESTARTS   AGE
deploy-7f4464bcdf-2gftm   1/1     Running   0          36s
deploy-7f4464bcdf-hz4cb   1/1     Running   0          36s
deploy-7f4464bcdf-rqhr6   1/1     Running   0          36s
[root@master ~]# kubectl exec deploy-7f4464bcdf-2gftm -it -- /bin/bash
root@deploy-7f4464bcdf-2gftm:/# cd /usr/share/nginx/html
root@deploy-7f4464bcdf-2gftm:/usr/share/nginx/html# echo "Test Web1" >index.html 
root@deploy-7f4464bcdf-2gftm:/usr/share/nginx/html# cat index.html 
Test Web1

-----------------------------------------------------------------------------
webui 띄우는 방법

https://kubernetes.io/ko/docs/tasks/access-application-cluster/web-ui-dashboard/

1. kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.4.0/aio/deploy/recommended.yaml

2.  kubectl proxy

3. 로그인하기 위해서는 token key를 알아야 합니다 
#kubectl get serviceaccount -A


토큰키 확인
# kubectl describe serviceaccount kubernetes-dashboard -n kubernetes-dashboard

tokens :  를 확인하세요 

토큰키 체크하기 

#kubectl describe secret <toknes> -n kubernetes-dashboard

 http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/
 위의 URL에 들어가셔서 token키를 입력해주시면 화면을 볼수 있습니다 
 
 webui의 nodeport추가 방법
 
 
 Service 부분을 확인하셔서
type: NodePort를 추가합니다 
spec:
  ports:
    - port: 443
      targetPort: 8443
  selector:
    k8s-app: kubernetes-dashboard
  type: NodePort   ----> 이부분을 추가해줍니다 


 
 [root@master ~]# kubectl get deployments.apps -n kubernetes-dashboard 
NAME                        READY   UP-TO-DATE   AVAILABLE   AGE
dashboard-metrics-scraper   1/1     1            1           2d4h
kubernetes-dashboard        1/1     1            1           2d4h
[root@master ~]# kubectl get service -n kubernetes-dashboard 
NAME                        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)         AGE
dashboard-metrics-scraper   ClusterIP   10.104.137.35    <none>        8000/TCP        2d4h
kubernetes-dashboard        NodePort    10.108.220.255   <none>        443:31724/TCP   2d4h
[root@master ~]# 



