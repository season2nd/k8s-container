
http://naver.me/G7xJ06m3
패스워드 :12345

monolith env : 하나의 장비에 모든 sw. 서비스가 올라가 있는 환경 

ex) h/w 

도달해야할 목적: 분산환경 

NASA 급하게 만든 망.. : 분산환경, --> www의 시초가 됩니다.

멀틱스  : 분산환경, 공유 자원,..  그때 시점에 규현을 할수가 없었습니다.
유닉스 

개념.. : 구현,,., 하드웨어,., 2000초반에 GPU ... 
리눅스 

직렬연결,,, : 병렬연결( 클라우드, 빅데이터, 인공지능..)
하드웨어 : L4   소프트웨어로 구성해서 사용하겠습니다.

UI/UX.. requirement .. 요구사항 : Jira.. 
설계도.
-----------------------------------------------
개발 ( OS, DB, 개발자, 언어 ....)

application (스마트폰의 앱, 웹...)
웹 앱  : m.naver.com  : 속도느림
native 앱   : 음성인식, 안면인식,.,  속도.. 빠름
= hybride (짬뽕)

MSP  하이마트 
팔기도 고객원하는 대쉬보드를 운영 환경, 

--------------------------------------------------
테스트
기능, 성능 ,, 단위 , 통합  --> TDD.... 
----------------------------------------------
배포 :  jenkins.. 자동화 ,,, ( CD : 지속적인 배포 )
----------------------------------------------------------------
운영  : 대쉬보드 
APM 
----------------------------------------------------
agile : 민첩한 ---> 현실에선 힘듭니다 .

자동화 : 
일상생활의 자동화 : 키오스크, 로봇 청소기,,, 
웹 ... windows : RPA 

좌표 인식, object, 이미지,  OCR인식  : 레코딩을 뜸
반복 --> replay...

-----------------------------------------------------
제조업 :  
MES 공장자동화 모니터링 
-----------------------------------------------------

자동화 : CI (지속한 통합) 

github  + jenkins + docker .. ==> 쿠버네티스(서비스)
----------------------------------------------------
redhat 
sw 설치시에 사용하는 명령어 
rpm --> yum --> dnf 

우분투
apt-get 

클라우드: helm 
-----------------------------------------------------
1. 속도
2. 크기
3. 환경  : 개발자
각자의 컴퓨터.. 하고 실서버에다 코드를 올림니다

개발자가 개발하는 똑같은 환경(OS하고 , version)에서 
개발을 하겠습니다..... 같은 환경

업데이트나 패치 주기가 엄청 짧아졌습니다. ( 고객의 니즈 만족)

OS패치 .. 한달에 한번씩, ...
----------------------------------------------------------
필요한 라이브러리만 가져와서 OS를 구성합니다 
김치찌개... 요리해서 먹고 싶어요 레시피를 찾고 싶어요

라이브러리 ---->  패키지   --> 모듈  ---> 함수 
도서관 , 서점(?) ---> 요리코너--> 한식   --> 김치찌개 레시피 

내가 만든 함수 내가만든 레시피, 내가만든 단어,,, 
외장함수 

기존에 언어 , 시스템 에 있는 함수 
내장 함수 
-------------------------------------------
정말로 필요한 라이브러리로만 구성된 OS 입니다 
격리되어있는 공간이 필요합니다 

OS설치시 필요한 부분
자원(CPU, memory)
n/w
hostname
user
파티션,,, 

격리되어있는 공간 어떻게 만들까,, ?
cgroup (자원: cpu,memory.,,)
chroot ( change root)
namespace ( hostname, user, n/w...)
------------------------------------------------------------------
open source : 소스코드가 오픈 되어있습니다 

빅데이터, AI : 하둡, 스파크, 파이썬,, (map reduce)....

3년.., 기초 (x), 머신러닝,,, 
3년 이후..  모른다,,, 다른 대안이나 좀더 발전 sw.

IaaS: 인프라 
PaaS : 플랫폼 

올해 : mydata. 

sol : spring cloud..
---------------------------------------------------------------------------
IT: 언어(스크립트 언어) , 클라우드..

#sudo systemctl enable docker
#sudo systemctl start docker

#docker ps
#docker images

도커는 systemd 데몬을 사용하는구나를 알수 있습니다 

컨테이너는 리눅스 커널에서 나온것입니다 

윈도우에 설치시에는 리눅스 커널을 올려야 됩니다 
WSL (Windows Subsystem for Linux)
윈도우는 CLI (command line interface) 적극적
리눅스 x-windows... 우분투,. 
-----------------------------------------------------------------

1. office 파일은 : image  ( 내가 마음대로 만든 이미지)
2. office 설치는 : docker run 
3.  office 실행해서 엑셀을 사용하는건 : container (process)

이미지를 가져오는 곳은 : registry server(hub.docker.com)

일반적인 회사에서는 public cloud 기본으로 지원하지 않아요 
보안

private cloud에서 내부 registry를 구성해서 사용합니다.

--------------------------------------------------------------
#docker pull nginx
#docker info

Cgroup Driver: cgroupfs

docker default nw : bridge 

# docker network ls
# docker network create test

쿠버네티스 : 컨테이너의 오케스트레이션 이라고 합니다 

컨테이너 갯수가 10개 이상일 경우 도커와 미니쿠버를 사용하시는게 편리합니다 

도커 : swarm은 도커에 default 컨테이너 오케스트레이션 
미니 쿠버 :  설치를 하셔야 합니다 . 일반적인 standalone 쿠버네티스보다
작업 컨테이너 오케스트레이션 입니다 

쿠버네티스  : 컨테이너 개수가 10개 이상일 경우 사용하시는게 좋습니다 
운영단에 컨테이너를 관리 하는 목적으로 
다양한 서비스를 활용하기 위해서 

개발자 , 테스터 : 이미지를 만듭니다. 
( 소스코드, 웹서버 .. DB등등의 환경이 구성되어있습니다)

runc는 기본적으로 도커의 기술 3가지를 만드는 역할을 담당합니다 
chroot
cgroup
namespace

Registry: https://index.docker.io/v1/
hub.docker.com 이 바로 registry
편집은 불가능합니다. 내가 원하는 registry를 추가 할수없습니다.

Insecure Registries:
  127.0.0.0/8  -->localhost

여러분이 사용하시는 IP 대역을 여기다가 넣어주셔야 합니다.(실습)


Docker Root Dir: /var/lib/docker

[root@node3 docker]# docker images
REPOSITORY   TAG       IMAGE ID       CREATED       SIZE
nginx        latest    f652ca386ed1   10 days ago   141MB

버전 정보를 언급하지 않으면 default는 latest입니다 
latest 는 도커에서 만들었습니다 
우리가 알고있는 nginx의 진짜 latest인지를 의심해보세요 

# docker pull nginx:1.14
[root@node3 docker]# docker images
REPOSITORY   TAG       IMAGE ID       CREATED       SIZE
nginx        latest    f652ca386ed1   10 days ago   141MB
nginx        1.14      295c7be07902   2 years ago   109MB

create는 도커가 만들었습니다 
도커가 github쪽에다가 commit한 시점 입니다,

도커는 기본적으로 container의 IP addr을 자동으로 할당해줍니다 
172.17.0.2...~~~~~~~~

nginx안에는 OS도 같이 포함되어있습니다 

리눅스 : 커널을 기본적으로 가져 갑니다 
쉘 : ksh, csh, bsh, bash shell등이 있습니다 
쉘 라이브러리를 추가해줍니다 

이미지는 누가 만들었습니다 (도커 회사에서 )
어떻게... 기존의 각각의 이미지의  layer를 구성합니다 

맨 꼭대기 위의있는 layer 
맨위에는 nginxd start되는 layer
중간에는 nginx설치 layer
중간에는 환경변수 layer
밑에는 OS layer

read only : 편집이 불가능
맨 꼭대기 위의 layer: rw 내맘대로 바꿀수있습니다 

여러분들이 기존의 컨테이너를 수정해서 이미지를 만들수 있습니다 
그리고 이후에 해당 이미지는 다시 컨테이너 ,, 다시 이미지,

overlayfs --> unionfs ...., 

도커의 장점
1. hub.docker.com
2. overlay2 기술
3. dockerfile

---------------------------------------------
# mkdir -p ~/newroot/{bin,lib64}

# chroot ~/newroot /bin/bash

# cp /lib64/libtinfo.so.5 ~/newroot/lib64
.
.
.
# cp /bin/bash  ~/newroot/bin

init : 리눅스의 가장 큰 process (parents)

고아 프로세스 : parent가 없어졌을 경우 init으로 연결됩니다.
좀비 프로세스 

docker 명령어를 치는 행위 : client 
/var/run/docker.sock

dockerd 는 해당 명령어를 확인하고 parsing을해서 return값을 반환합니다 

gRPC 
gRPC는 Google에서 개발한 RPC(Remote Procedure Call) 시스템입니다. 
전송을 위해 TCP/IP 프로토콜과 HTTP 2.0 프로토콜을 사용하고 IDL(Interface Definition language)로 protocol buffer를 사용합니다.

containerd(컨테이너의 lifecycle을 관장합니다)
containerd-shim (parent process)
container ...... 

도커의 단점
1. root 유저의 권한이 있어야 도커 명령어 실행이 가능합니다 
일반 user에게 권한을 줘야 됩니다 (실습)

2. hub.docker.com의 보안이 취약합니다.
3.  systemd에 등록되어 있어서 dockerd가 문제 생길시에
containerd에까지 영향을 미쳐서 프로세스가 죽을수 있습니다 

redhat의 podman은 컨테이너와 연결되어 있지 않기 때문에
문제가 발생해도 컨테이너에 영향을 미치지 않습니다.

쿠버네티스의 절차서인 .yaml 파일을 만들어줍니다 
#podman generate kube.... 
----------------------------------------------------------------------------
# docker inspect nginx

# docker run -d --name web nginx
# docker exec -it web /bin/bash
##cd /usr/share/nginx/html
#echo "Test Web" > index.html
#cat index.html
Test Web

ctrl + p,q  를 통해서 exit해주세요 

 아까  cat /etc/hosts 파일에 나와있는 IP addr를 체크 

# curl 172.17.0.2(?)

컨테이너를 나중에 image로 변경합니다
변경한 이미지를 hub.docker.com에 push하겠습니다 

----------------------------------------------
docker의 configuration파일은  .json 입니다 

/var/lib/docker/image/overlay2/repositories.json
이 있습니다 
각 이미지의 어떤식으로 layer가 구성되어있는지
UUID가 있습니다 .

daemon.json 
--------------------------------------------------------------------------------
filesystem path
서비스 path

docker log size 
docker log type... 기타등 등 docker의 가장 중요한 config 파일 입니다 

web이라는 컨테이너를 nginx:v1이라는 이미지로 commit했습니다 

# docker commit web nginx:v1

hub.docker.com에 push하기 위해서는 
docker login을 먼저 합니다 ..

Login Succeeded

# docker push nginx:v1 -->에러가 발생 

hub.docker.com에 이미지를 업로드 하기 위해서는 
이미지 이름에 나의 계정 아이디가 들어가야 합니다 

이미지 이름에
<여러분 계정ID>/<이미지 이름>:<버전정보>
예시)# docker tag nginx:v1 comnik00/nginx:v3

docker tag <기존 이미지 이름> <계정ID>/<이미지이름>:<버전정보>

# docker push comnik00/nginx:v3
---------------------------------------------------------------------------------
코딩 : 컴퓨터가 이해할수 있는 언어를 사용해서 명령어를 내리는거

절차서  꼼꼼하게 만들어서 보내줘야 됩니다.
docker -> dockerfile 을 만들어줘야 합니다  : 단일 컨테이너 구성

docker 멀티 컨테이너 구성 : docker-compose를 설치 하셔야 합니다 
멀티 컨테이너 절차서를 만들어서 사용합니다 

확장자명이 .yml 입니다 

쿠버네티스 : 멀티 컨테이너 지원합니다 
확장자명이 .yaml 입니다 

교재에서는 dockerfile을 이용해서 이미지를 만듭니다 (build)
만든 이미지로 컨테이너를 실행합니다 (궁긍적인 목적)

----------------------------------------
주석 처리는 #
명령어는 대문자로 사용합니다. 

FROM은 base이미지 ... 대부분은 OS가 많이 들어갑니다. 

RUN은 실행하겠습니다 . 
apt-get update.... apt-get install


CMD 하고 ENTRYPOINT의 차이점

ENTRYPOINT는 그 명령어에 충실합니다 

ENTRYPOINT ls   --> 무조건 ls명령을 실행해야 합니다 
CMD ls 는 컨테이너 실행시에 기존의 ls가 아닌 다른 명령어로 치환할수있습니다 

#cat dockerfile
FROM centos:7
ENTRYPOINT ["/bin/echo", "Hello"]
CMD ["World"]

#docker build -t test .
# docker run test
Hello World

# docker run test aaa
Hello aaa

RUN apt-get update -y   : 쉘 모드 
RUN ["node", "/hell"]   :exec 모드 

windows
virtual box 

centos7.iso 
리눅스 

네트워크, 설정 















































































































































































































































